class LadderLength_127 {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
         Set<String> wordSet = new HashSet<>(wordList);
        if (wordSet.size() == 0 || !wordSet.contains(endWord)){
            return  0;
        }
        int len = beginWord.length();
        Queue<String> q = new LinkedList<>();
        Set<String> set = new HashSet<>();
        q.offer(beginWord);
        int res = 1;
        set.add(beginWord);
        while (!q.isEmpty()){
            int size = q.size();
            for (int i = 0 ; i < size ; i++){
                String str = q.poll();
                char[] charArray = str.toCharArray();
                for (int j = 0 ; j < len ; j++){
                    char ori = charArray[j];
                    for (char k = 'a' ; k <= 'z' ; k++){
                        if (ori == k){
                            continue;
                        }
                        charArray[j] = k;
                        String next = String.valueOf(charArray);
                        if (wordSet.contains(next)){
                            if(next.equals(endWord)){
                                return res + 1;
                            }
                            if(!set.contains(next)){
                            set.add(next);
                            q.offer(next);
                            }
                        }
                    }
                    charArray[j] = ori;
                }
            }
        res++;    
        }
    return 0;
    }
}