class Permute_46 {
    public List<List<Integer>> permute(int[] nums) {
        int len = nums.length;
        int n = 1;
        for (int i = 2 ; i < len ; i++){
            n *= i;
        }
        List<List<Integer>> l = new ArrayList<>(n);
        if (len == 0){
            return l;
        }
        int visited = 0;
        Deque<Integer> queue = new ArrayDeque<>(len);
        dfs(nums, len, 0, queue, visited, l);
        return l;
    }

    public void dfs(int[] nums, int len, int dept, Deque<Integer> queue, int visited, List<List<Integer>> l){
        if (dept == len){
            l.add(new ArrayList<>(queue));
            return;
        }
        for (int i = 0 ; i < len ; i++){
            if ( ((visited >> i) & 1) == 0 ){
                visited ^= ( 1 << i );
                queue.addLast(nums[i]);
                dfs(nums,len,dept+1,queue,visited,l);
                visited ^= ( 1 << i);
                queue.removeLast();
            }
        }
    }

  
}